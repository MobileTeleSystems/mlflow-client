name: Tests

on:
  push:
    branches-ignore:
    - dependabot/**
    - pre-commit-ci-update-config
  pull_request:
    branches:
    - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Run tests (${{ matrix.python-version }} on ${{ matrix.os }}, MLflow ${{ matrix.mlflow-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', pypy-3.7, pypy-3.8]
        os: [ubuntu-latest]
        mlflow-version: [1.23.0]
        # run only limited set of tests because it takes too long
        include:
        - os: ubuntu-latest
          python-version: '3.10'
          mlflow-version: 1.22.0
        - os: ubuntu-latest
          python-version: '3.10'
          mlflow-version: 1.21.0
        - os: ubuntu-latest
          python-version: '3.10'
          mlflow-version: 1.20.2
        - os: ubuntu-latest
          python-version: '3.10'
          mlflow-version: 1.19.0
        - os: ubuntu-latest
          python-version: '3.10'
          mlflow-version: 1.18.0
        - os: ubuntu-latest
          python-version: '3.10'
          mlflow-version: 1.17.0

    env:
      MLFLOW_HOST: localhost
      MLFLOW_PORT: 5000

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-${{ matrix.python-version }}-
          pip-${{ runner.os }}-

    - name: Upgrade pip
      run: python -m pip install --upgrade pip setuptools wheel

    - name: Install dependencies
      run: pip install -r requirements.txt -r requirements-test.txt -r requirements-dev.txt

    - name: Run pylint
      run: pylint mlflow_rest_client

    - name: Build package
      run: |
        python setup.py --version
        python setup.py bdist_wheel sdist

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: buildx-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.mlflow-version }}-${{ hashFiles('docker/Dockerfile') }}
        restore-keys: |
          buildx-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.mlflow-version }}-
          buildx-${{ runner.os }}-${{ matrix.python-version }}-
          buildx-${{ runner.os }}-

    - name: Build MLflow image
      uses: docker/build-push-action@v3
      with:
        context: docker
        build-args: MLFLOW_VERSION=${{ matrix.mlflow-version }}
        push: false
        load: true
        tags: mlflow-test:${{ matrix.mlflow-version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Run MLflow container
      env:
        MLFLOW_VERSION: ${{ matrix.mlflow-version }}
      run: |
        docker-compose -f ./docker/docker-compose.test.yml up -d

    - name: Run tests
      run: |
        mkdir reports/
        pip install -e .
        ./docker/wait-for-it.sh -h $MLFLOW_HOST -p $MLFLOW_PORT -t 0
        coverage run -m pytest --reruns 5

    - name: Stop MLflow container
      if: always()
      run: |
        docker-compose -f ./docker/docker-compose.test.yml down

    - name: Combine coverage
      run: |
        coverage combine
        coverage xml -o reports/coverage-${{ matrix.python-version }}.xml -i

    - name: Upload coverage results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-${{ matrix.python-version }}
        path: reports/coverage-${{ matrix.python-version }}.xml

  all_done:
    name: Tests done
    runs-on: ubuntu-latest
    needs: [tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download all coverage reports
      uses: actions/download-artifact@v3
      with:
        path: reports

    - name: Move coverage reports to the root folder
      run: find reports -type f -exec mv '{}' reports \;

    - name: Check coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./reports
        fail_ci_if_error: true

    - name: All done
      run: echo 1
